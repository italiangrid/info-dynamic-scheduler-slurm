#!/usr/bin/python
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#     http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

import sys
import re
import socket
import time
import shlex
import subprocess
from threading import Thread

from SLURMInfoUtils import SInfoHandler
from SLURMInfoUtils import CommonUtils





def main():
    pRegex = re.compile('^\s*([^=\s]+)\s*=([^$]+)$')
    
    config = {}
    
    hostname = socket.getfqdn()
    now = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())

    conffile = None
    foundErr = False
    try:
        if len(sys.argv) <> 2:
            raise Exception("Usage: info-dynamic-pbs <config-file>")

        conffile = open(sys.argv[1])
        for line in conffile:
            parsed = pRegex.match(line)
            if parsed:
                config[parsed.group(1)] = parsed.group(2).strip(' \n\t"')
            else:
                tmps = line.strip()
                if len(tmps) > 0 and not tmps.startswith('#'):
                    raise Exception("Error parsing configuration file " + sys.argv[1])

        if not "outputformat" in config:
            if "GlueFormat" in config:
                config["outputformat"] = config["GlueFormat"]
            else:
                config["outputformat"] = "both"
        if config["outputformat"] not in ["glue1", "glue2", "both"]:
            raise Exception("FATAL: Unknown output format specified in config file:%s" % config["outputformat"])

        if not "glue1-static-file-CE" in config:
            config["glue1-static-file-CE"] = "/var/lib/bdii/gip/ldif/static-file-CE.ldif"
        
        if not "glue2-static-file-computing-manager" in config:
            config["glue2-static-file-computing-manager"] = "/var/lib/bdii/gip/ldif/ComputingManager.ldif"
        
        if not "glue2-static-file-computing-share" in config:
            config["glue2-static-file-computing-share"] = "/var/lib/bdii/gip/ldif/ComputingShare.ldif"
            

    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        foundErr = True

    if conffile:
        conffile.close()
    if foundErr:
        sys.exit(1)

    glue1QueueTable = None
    glue2QueueTable = None
    managerTable = None
    
    allQueues = set()
    
    try:
        if config['outputformat'] <> "glue2":

            glue1QueueTable = CommonUtils.fillinGLUE1QueueTable(config["glue1-static-file-CE"])
            for queue in glue1QueueTable.values():
                allQueues.add(queue)
        
        if config['outputformat'] <> "glue1":

            glue2QueueTable = CommonUtils.fillinGLUE2QueueTable(config["glue2-static-file-computing-share"])
            for queue in glue2QueueTable.values():
                allQueues.add(queue)
            
            managerTable = CommonUtils.fillinManagerTable(config["glue2-static-file-computing-manager"])
            
    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        sys.exit(1)


    infoContainer = SInfoHandler.parse()    

    out = sys.stdout

    if config['outputformat'] <> "glue2":
    
        for glue1DN in glue1QueueTable:
        
            queue = glue1QueueTable[glue1DN]
            if not queue in infoContainer:
                continue
            qInfo = infoContainer[queue]
            
            out.write(glue1DN + '\n')
            
            out.write('GlueCEStateStatus: %s\n' % qInfo.state)
            out.write('\n')
    
    
    
    if config['outputformat'] <> "glue1":
    
        for glue2DN in glue2QueueTable:
            queue = glue2QueueTable[glue2DN]
            if not queue in infoContainer:
                continue
            qInfo = infoContainer[queue]
            
            out.write(glue2DN + '\n')
            
            out.write('GLUE2ComputingShareServingState: %s\n' % qInfo.state.lower())
            out.write('GLUE2EntityCreationTime: %s\n' % now)
            out.write('\n')



if __name__ == "__main__":
    main()

