#!/usr/bin/python
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#     http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

import sys
import re
import socket
import time
import shlex
import subprocess
from threading import Thread






def runCommand(cmdline, stdout_thread):

    try:
        cmd = shlex.split(cmdline)
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    
        stdout_thread.setStream(process.stdout)
        stderr_thread = ErrorHandler(process.stderr)
    
        stdout_thread.start()
        stderr_thread.start()
    
        ret_code = process.wait()
    
        stdout_thread.join()
        stderr_thread.join()
    
        return (ret_code, stderr_thread.message)   

    except:
        etype, evalue, etraceback = sys.exc_info()
        return (-125, "%s: (%s)" % (etype, evalue))


def readDNsAndAttr(filename, dnRE, queueRE):
    dnsAndQueues = dict()
    ldifFile = None
    try:
    
        ldifFile = open(filename)
        
        for line in ldifFile.readlines():
            
            tmpm = dnRE.match(line)
            if tmpm <> None:
                currDN = line.strip()
                continue
                
            tmpm = queueRE.match(line)
            if tmpm <> None:
                dnsAndQueues[currDN] = tmpm.group(1).strip()
        
    finally:
        if ldifFile:
            ldifFile.close()

    return dnsAndQueues



def main():
    pRegex = re.compile('^\s*([^=\s]+)\s*=([^$]+)$')
    
    config = {}
    
    hostname = socket.getfqdn()
    now = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())

    conffile = None
    foundErr = False
    try:
        if len(sys.argv) <> 2:
            raise Exception("Usage: info-dynamic-pbs <config-file>")

        conffile = open(sys.argv[1])
        for line in conffile:
            parsed = pRegex.match(line)
            if parsed:
                config[parsed.group(1)] = parsed.group(2).strip(' \n\t"')
            else:
                tmps = line.strip()
                if len(tmps) > 0 and not tmps.startswith('#'):
                    raise Exception("Error parsing configuration file " + sys.argv[1])

        if not "outputformat" in config:
            if "GlueFormat" in config:
                config["outputformat"] = config["GlueFormat"]
            else:
                config["outputformat"] = "both"
        if config["outputformat"] not in ["glue1", "glue2", "both"]:
            raise Exception("FATAL: Unknown output format specified in config file:%s" % config["outputformat"])

        if not "glue1-static-file-CE" in config:
            config["glue1-static-file-CE"] = "/var/lib/bdii/gip/ldif/static-file-CE.ldif"
        
        if not "glue2-static-file-computing-manager" in config:
            config["glue2-static-file-computing-manager"] = "/var/lib/bdii/gip/ldif/ComputingManager.ldif"
        
        if not "glue2-static-file-computing-share" in config:
            config["glue2-static-file-computing-share"] = "/var/lib/bdii/gip/ldif/ComputingShare.ldif"
            

    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        foundErr = True

    if conffile:
        conffile.close()
    if foundErr:
        sys.exit(1)

    glue1QueueTable = dict()
    glue2QueueTable = dict()
    managerTable = None
    
    if config['outputformat'] <> "glue2":
        
        glue1DNRegex = re.compile("dn:\s*GlueCEUniqueID\s*=\s*[^$]+")
        glue1QueueRegex = re.compile("GlueCEName\s*:\s*([^$]+)")

        try:

            glue1QueueTable = readDNsAndAttr(config["glue1-static-file-CE"], glue1DNRegex, glue1QueueRegex)
        
        except Exception, ex:
            sys.stderr.write(str(ex) + '\n')
            sys.exit(1)




    if config['outputformat'] <> "glue1":
    
        glue2DNRegex = re.compile("dn:\s*GLUE2ShareID\s*=\s*[^$]+")
        glue2QueueRegex = re.compile("GLUE2ComputingShareMappingQueue\s*:\s*([^$]+)")

        managerRegex = re.compile("dn:\s*GLUE2ManagerId\s*=\s*[^$]+")
        manAttrRegex = re.compile("GLUE2ManagerID\s*:\s*([^$]+)")
        
        try:

            glue2QueueTable = readDNsAndAttr(config["glue2-static-file-computing-share"], glue2DNRegex, glue2QueueRegex)
            managerTable = readDNsAndAttr(config["glue2-static-file-computing-manager"], managerRegex, manAttrRegex)
            
        except Exception, ex:
            sys.stderr.write(str(ex) + '\n')
            sys.exit(1)


    pass






if __name__ == "__main__":
    main()

